<%
  require 'json'

  join_hosts = link('consul_servers').instances.collect { |server| server.address }
  cluster_size = join_hosts.size
  is_server = p('consul.server', true)
  #client_addr = p('consul.client_addr', '0.0.0.0')
  agent_config = p('consul.agent_config', nil)

  # test
  ssl_ca = p("consul.ssl_ca", nil)
  ssl_cert = p("consul.ssl_cert", nil)
  ssl_key = p("consul.ssl_key", nil)
  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end
    if !network
      _, network = networks.first
    end
    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end
    network.ip
  end
  def confab
    p('confab')
  end
  def consul
    config = p('consul')
    if config['agent']['node_name_includes_id']
      config['agent']['node_name'] = "#{spec.name}-#{spec.id}"
    end
    config
  end


  config = {
    data_dir: '/var/vcap/store/consul',
    ui: true,
    node_name: "#{spec.deployment}-#{name}-#{index}",
    node_id: "#{spec.id}",
    bind_addr: '0.0.0.0',
    client_addr: discover_external_ip,
    advertise_addr: spec.ip,
    leave_on_terminate: p('consul.leave_on_terminate'),
    log_level: 'INFO',
    domain: p('consul.domain', 'consul'),
    server: is_server,
    rejoin_after_leave: true,
    ports: {
      dns: 53
    },
    disable_update_check: true
  }

  if p('consul.datacenter', nil)
    config[:datacenter] = p('consul.datacenter')
  end

  if ssl_ca and ssl_cert and ssl_key
    config[:verify_incoming] = p('consul.verify_incoming')
    config[:verify_outgoing] = true
    config[:ca_file] = '/var/vcap/jobs/consul/consul/ca.cert'
    config[:cert_file] = '/var/vcap/jobs/consul/consul/consul.cert'
    config[:key_file] = '/var/vcap/jobs/consul/consul/consul.key'
    config[:ports][:https] = 8500
    config[:ports][:http] = -1
  end

  if p('consul.http_port', nil)
    config[:ports][:http] = p('consul.http_port')
  end

  if p('consul.encrypt', nil)
    config[:encrypt] = p('consul.encrypt')
  end

  if (networks = spec.networks.methods(false)) && dns = spec.networks.send(networks.first).dns
    config[:recursor] = dns.first
  else
    config[:recursor] = p('consul.default_recursor')
  end

  config[:start_join] = join_hosts
  config[:retry_join] = join_hosts
  config[:bootstrap_expect] = cluster_size if is_server

  if agent_config
    # symbolize hash keys, merge to config, remove nil values
    agent_config = agent_config.inject({}) { |m,(k,v)| m[k.to_sym] = v; m }
    config.merge!(agent_config)
    config = config.delete_if { |k,v| v.nil? }
  end
%>

<%= JSON.pretty_generate(config) %>
